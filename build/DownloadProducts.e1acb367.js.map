{"mappings":"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","sources":["./src/DownloadProducts.js","./src/samp.js"],"sourcesContent":["// @ts-check\n'use strict';\n\nimport React from 'react'\n\nimport _ from 'lodash'\nimport { configure } from 'mobx'\nimport { observer } from \"mobx-react\"\nimport { Button } from 'semantic-ui-react'\nimport samp from './samp.js'\n\nconfigure({ enforceActions: 'observed' });\n\nfunction getCookie(cname) {\n  var name = cname + \"=\";\n  var decodedCookie = decodeURIComponent(document.cookie);\n  var ca = decodedCookie.split(';');\n  for (var i = 0; i < ca.length; i++) {\n    var c = ca[i];\n    while (c.charAt(0) == ' ') {\n      c = c.substring(1);\n    }\n    if (c.indexOf(name) == 0) {\n      return c.substring(name.length, c.length);\n    }\n  }\n  return \"\";\n}\n\nconst DownloadProducts = observer((props) => {\n  const [sampActive, setSampActive] = React.useState(false);\n  const connector = React.useRef(new samp.samp.Connector(\"Sender\"));\n\n  React.useEffect(() => {\n    let interval = connector.current.onHubAvailability(hubRunning => setSampActive(hubRunning), 2000);\n    return ((my_interval) =>\n    (() => {\n      my_interval && clearInterval(my_interval);\n    }))(interval);\n  }, [])\n\n  const loadSampImage = (e, filename) => {\n    const l = window.location;\n    const url = l.protocol + '//' + l.hostname + ':' + l.port + '/app/products/' + getCookie('session_id') + '/' + filename;\n    connector.current.runWithConnection(function (connection) {\n      var msg = new samp.samp.Message('image.load.fits',\n        {\n          url: url,\n          name: filename,\n        });\n      connection.notifyAll([msg]);\n    }, function () {\n      alert('Error connecting to SAMP');\n    });\n  };\n\n  const products = {\n    'XNICER map': { text: 'XNICER map', filename: 'ext_map.fits', color: 'blue' },\n    'XNICER inverse variance': { text: 'XNICER ivar', filename: 'ext_ivar.fits', color: 'red' },\n    'XNICEST map': { text: 'NICER map', filename: 'xext_map.fits', color: 'violet' },\n    'XNICEST inverse variance': { text: 'NICER ivar', filename: 'xext_ivar.fits', color: 'pink' },\n    'Star density': { text: 'Density', filename: 'density.fits', color: 'grey' }\n  };\n\n  const js9options = { scale: 'sqrt' };\n  return (\n    <div>\n      {_.map(props.products, name => (\n        <span key={name}>\n          <Button.Group>\n            <Button animated='vertical' color={products[name].color}\n              href={'/app/download?filename=' + products[name].filename}>\n              <Button.Content hidden content='Download' />\n              <Button.Content visible content={products[name].text} />\n            </Button>\n            <Button color={products[name].color} basic icon={{ name: 'eye' }}\n              onClick={() => {\n                // @ts-ignore\n                JS9.Load('/app/download?filename=' + products[name].filename, js9options);\n              }} />\n            <Button color={products[name].color} basic icon={{ name: 'feed', className: 'faa-flash' }}\n              disabled={!sampActive} onClick={e => loadSampImage(e, products[name].filename)} />\n          </Button.Group>\n          {' '}\n        </span>\n      ))}\n    </div>\n  );\n});\n\nexport { DownloadProducts as default }\n","// samp\n// ----\n// Provides capabilities for using the SAMP Web Profile from JavaScript.\n// Exported tokens are in the samp.* namespace.\n// Inline documentation is somewhat patchy (partly because I don't know\n// what javascript documentation is supposed to look like) - it is\n// suggested to use it conjunction with the provided examples,\n// currently visible at http://astrojs.github.com/sampjs/\n// (gh-pages branch of github sources).\n\n// LICENCE\n// =======\n// samp.js - A Javascript module for connection to VO SAMP hubs\n// Written in 2013 by Mark Taylor\n//\n// This file is distributed under the CC0 Public Domain Dedication,\n// <http://creativecommons.org/publicdomain/zero/1.0/>.\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n\nvar samp = (function() {\n\n    // Constants defining well-known location of SAMP Web Profile hub etc.\n    var WEBSAMP_PORT = 21012;\n    var WEBSAMP_PATH = \"/\";\n    var WEBSAMP_PREFIX = \"samp.webhub.\";\n    var WEBSAMP_CLIENT_PREFIX = \"\";\n\n    // Tokens representing permissible types in a SAMP object (e.g. a message)\n    const TYPE_STRING = \"string\";\n    const TYPE_LIST = \"list\";\n    const TYPE_MAP = \"map\";\n\n    var heir = function(proto) {\n        function F() {};\n        F.prototype = proto;\n        return new F();\n    };\n\n    // Utility functions for navigating DOM etc.\n    // -----------------------------------------\n\n    var getSampType = function(obj) {\n        if (typeof obj === \"string\") {\n            return TYPE_STRING;\n        }\n        else if (obj instanceof Array) {\n            return TYPE_LIST;\n        }\n        else if (obj instanceof Object && obj !== null) {\n            return TYPE_MAP;\n        }\n        else {\n            throw new Error(\"Not legal SAMP object type: \" + obj);\n        }\n    };\n    var getChildElements = function(el, childTagName) {\n        var children = el.childNodes;\n        var child;\n        var childEls = [];\n        var i;\n        for (i = 0; i < children.length; i++) {\n            child = children[i];\n            if (child.nodeType === 1) {  // Element\n                if (childTagName && (child.tagName !== childTagName)) {\n                    throw new Error(\"Child <\" + children[i].tagName + \">\"\n                                  + \" of <\" + el.tagName + \">\"\n                                  + \" is not a <\" + childTagName + \">\");\n                }\n                childEls.push(child);\n            }\n        }\n        return childEls;\n    };\n    var getSoleChild = function(el, childTagName) {\n        var children = getChildElements(el, childTagName);\n        if (children.length === 1 ) {\n            return children[0];\n        }\n        else {\n            throw new Error(\"No sole child of <\" + el.tagName + \">\");\n        }\n    };\n    var getTextContent = function(el) {\n        var txt = \"\";\n        var i;\n        var child;\n        for (i = 0; i < el.childNodes.length; i++ ) {\n            child = el.childNodes[i];\n            if (child.nodeType === 1) {           // Element \n                throw new Error(\"Element found in text content\");\n            }\n            else if (child.nodeType === 3 ||      // Text\n                     child.nodeType === 4 ) {     // CDATASection\n                txt += child.nodeValue;\n            }\n        }\n        return txt;\n    };\n    var stringify = function(obj) {\n        return typeof JSON === \"undefined\" ? \"...\" : JSON.stringify(obj);\n    };\n\n    // XmlRpc class:\n    // Utilities for packing and unpacking XML-RPC messages.\n    // See xml-rpc.com.\n\n    var XmlRpc = {};\n\n    // Takes text and turns it into something suitable for use as the content\n    // of an XML-RPC string - special characters are escaped.\n    XmlRpc.escapeXml = function(s) {\n        return s.replace(/&/g, \"&amp;\")\n                .replace(/</g, \"&lt;\")\n                .replace(/>/g, \"&gt;\");\n    };\n\n    // Asserts that the elements of paramList match the types given by typeList.\n    // TypeList must be an array containing only TYPE_STRING, TYPE_LIST\n    // and TYPE_MAP objects in some combination.  paramList must be the\n    // same length.\n    // In case of mismatch an error is thrown.\n    XmlRpc.checkParams = function(paramList, typeList) {\n        var i;\n        for (i = 0; i < typeList.length; i++) {\n            if (typeList[i] !== TYPE_STRING &&\n                typeList[i] !== TYPE_LIST &&\n                typeList[i] !== TYPE_MAP) {\n                throw new Error(\"Unknown type \" + typeList[i]\n                              + \" in check list\");\n            }\n        }\n        var npar = paramList.length;\n        var actualTypeList = [];\n        var ok = true;\n        for (i = 0; i < npar; i++) {\n            actualTypeList.push(getSampType(paramList[i]));\n        }\n        ok = ok && (typeList.length === npar);\n        for (i = 0; ok && i < npar; i++ ) {\n            ok = ok && typeList[i] === actualTypeList[i];\n        }\n        if (!ok) {\n            throw new Error(\"Param type list mismatch: \" \n                          + \"[\" + typeList + \"] != \"\n                          + \"[\" + actualTypeList + \"]\");\n        }\n    };\n\n    // Turns a SAMP object (structure of strings, lists, maps) into an\n    // XML string suitable for use with XML-RPC.\n    XmlRpc.valueToXml = function v2x(obj, prefix) {\n        prefix = prefix || \"\";\n        var a;\n        var i;\n        var result;\n        var type = getSampType(obj);\n        if (type === TYPE_STRING) {\n            return prefix\n                 + \"<value><string>\"\n                 + XmlRpc.escapeXml(obj)\n                 + \"</string></value>\";\n        }\n        else if (type === TYPE_LIST) {\n            result = [];\n            result.push(prefix + \"<value>\",\n                        prefix + \"  <array>\",\n                        prefix + \"    <data>\");\n            for (i = 0; i < obj.length; i++) {\n                result.push(v2x(obj[i], prefix + \"      \"));\n            }\n            result.push(prefix + \"    </data>\",\n                        prefix + \"  </array>\",\n                        prefix + \"</value>\");\n          \n            return result.join(\"\\n\");\n        }\n        else if (type === TYPE_MAP) {\n            result = [];\n            result.push(prefix + \"<value>\");\n            result.push(prefix + \"  <struct>\");\n            for (i in obj) {\n                result.push(prefix + \"    <member>\");\n                result.push(prefix + \"      <name>\"\n                          + XmlRpc.escapeXml(i)\n                          + \"</name>\");\n                result.push(v2x(obj[i], prefix + \"      \"));\n                result.push(prefix + \"    </member>\");\n            }\n            result.push(prefix + \"  </struct>\");\n            result.push(prefix + \"</value>\");\n            return result.join(\"\\n\");\n        }\n        else {\n            throw new Error(\"bad type\");  // shouldn't get here\n        }\n    };\n\n    // Turns an XML string from and XML-RPC message into a SAMP object\n    // (structure of strings, lists, maps).\n    XmlRpc.xmlToValue = function x2v(valueEl, allowInt) {\n        var childEls = getChildElements(valueEl);\n        var i;\n        var j;\n        var txt;\n        var node;\n        var childEl;\n        var elName;\n        if (childEls.length === 0) {\n            return getTextContent(valueEl);\n        }\n        else if (childEls.length === 1) {\n            childEl = childEls[0];\n            elName = childEl.tagName;\n            if (elName === \"string\") {\n                return getTextContent(childEl);\n            }\n            else if (elName === \"array\") {\n                var valueEls =\n                    getChildElements(getSoleChild(childEl, \"data\"), \"value\");\n                var list = [];\n                for (i = 0; i < valueEls.length; i++) {\n                    list.push(x2v(valueEls[i], allowInt));\n                }\n                return list;\n            }\n            else if (elName === \"struct\") {\n                var memberEls = getChildElements(childEl, \"member\");\n                var map = {};\n                var s_name;\n                var s_value;\n                var jc;\n                for (i = 0; i < memberEls.length; i++) {\n                    s_name = undefined;\n                    s_value = undefined;\n                    for (j = 0; j < memberEls[i].childNodes.length; j++) {\n                        jc = memberEls[i].childNodes[j];\n                        if (jc.nodeType == 1) {\n                            if (jc.tagName === \"name\") {\n                                s_name = getTextContent(jc);\n                            }\n                            else if (jc.tagName === \"value\") {\n                                s_value = x2v(jc, allowInt);\n                            }\n                        }\n                    }\n                    if (s_name !== undefined && s_value !== undefined) {\n                        map[s_name] = s_value;\n                    }\n                    else {\n                        throw new Error(\"No <name> and/or <value> \"\n                                      + \"in <member>?\");\n                    }\n                }\n                return map;\n            }\n            else if (allowInt && (elName === \"int\" || elName === \"i4\")) {\n                return getTextContent(childEl);\n            }\n            else {\n                throw new Error(\"Non SAMP-friendly value content: \"\n                              + \"<\" + elName + \">\");\n            }\n        }\n        else {\n            throw new Error(\"Bad XML-RPC <value> content - multiple elements\");\n        }\n    };\n\n    // Turns the content of an XML-RPC <params> element into an array of\n    // SAMP objects.\n    XmlRpc.decodeParams = function(paramsEl) {\n        var paramEls = getChildElements(paramsEl, \"param\");\n        var i;\n        var results = [];\n        for (i = 0; i < paramEls.length; i++) {\n            results.push(XmlRpc.xmlToValue(getSoleChild(paramEls[i], \"value\")));\n        }\n        return results;\n    };\n\n    // Turns the content of an XML-RPC <fault> element into an XmlRpc.Fault\n    // object.\n    XmlRpc.decodeFault = function(faultEl) {\n        var faultObj = XmlRpc.xmlToValue(getSoleChild(faultEl, \"value\"), true);\n        return new XmlRpc.Fault(faultObj.faultString, faultObj.faultCode);\n    };\n\n    // Turns an XML-RPC response element (should be <methodResponse>) into\n    // either a SAMP response object or an XmlRpc.Fault object.\n    // Note that a fault response does not throw an error, so check for\n    // the type of the result if you want to know whether a fault occurred.\n    // An error will however be thrown if the supplied XML does not\n    // correspond to a legal XML-RPC response.\n    XmlRpc.decodeResponse = function(xml) {\n        var mrEl = xml.documentElement;\n        if (mrEl.tagName !== \"methodResponse\") {\n            throw new Error(\"Response element is not <methodResponse>\");\n        }\n        var contentEl = getSoleChild(mrEl);\n        if (contentEl.tagName === \"fault\") {\n            return XmlRpc.decodeFault(contentEl);\n        }\n        else if (contentEl.tagName === \"params\") {\n            return XmlRpc.decodeParams(contentEl)[0];\n        }\n        else {\n            throw new Error(\"Bad XML-RPC response - unknown element\"\n                          + \" <\" + contentEl.tagName + \">\");\n        }\n    };\n\n    // XmlRpc.Fault class:\n    // Represents an XML-RPC Fault response.\n    XmlRpc.Fault = function(faultString, faultCode) {\n        this.faultString = faultString;\n        this.faultCode = faultCode;\n    };\n    XmlRpc.Fault.prototype.toString = function() {\n        return \"XML-RPC Fault (\" + this.faultCode + \"): \" + this.faultString;\n    };\n\n    // XmlRpcRequest class:\n    // Represents an call which can be sent to an XML-RPC server.\n    var XmlRpcRequest = function(methodName, params) {\n        this.methodName = methodName;\n        this.params = params || [];\n    }\n    XmlRpcRequest.prototype.toString = function() {\n        return this.methodName + \"(\" + stringify(this.params) + \")\";\n    };\n    XmlRpcRequest.prototype.addParam = function(param) {\n        this.params.push(param);\n        return this;\n    };\n    XmlRpcRequest.prototype.addParams = function(params) {\n        var i;\n        for (i = 0; i < params.length; i++) {\n            this.params.push(params[i]);\n        }\n        return this;\n    };\n    XmlRpcRequest.prototype.checkParams = function(typeList) {\n        XmlRpc.checkParams(this.params, typeList);\n    };\n    XmlRpcRequest.prototype.toXml = function() {\n        var lines = [];\n        lines.push(\n           \"<?xml version='1.0'?>\",\n           \"<methodCall>\",\n           \"  <methodName>\" + this.methodName + \"</methodName>\",\n           \"  <params>\");\n        for (var i = 0; i < this.params.length; i++) {\n            lines.push(\"    <param>\",\n                       XmlRpc.valueToXml(this.params[i], \"      \"),\n                       \"    </param>\");\n        }\n        lines.push(\n           \"  </params>\",\n           \"</methodCall>\");\n        return lines.join(\"\\n\");\n    };\n\n    // XmlRpcClient class:\n    // Object capable of sending XML-RPC calls to an XML-RPC server.\n    // That server will typically reside on the host on which the\n    // javascript is running; it is not likely to reside on the host\n    // which served the javascript.  That means that sandboxing restrictions\n    // will be in effect.  Much of the work done here is therefore to\n    // do the client-side work required to potentially escape the sandbox.\n    // The endpoint parameter, if supplied, is the URL of the XML-RPC server.\n    // If absent, the default SAMP Web Profile server is used.\n    var XmlRpcClient = function(endpoint) {\n        this.endpoint = endpoint ||\n                        \"http://localhost:\" + WEBSAMP_PORT + WEBSAMP_PATH;\n    };\n\n    // Creates an XHR facade - an object that presents an interface\n    // resembling that of an XMLHttpRequest Level 2.\n    // This facade may be based on an actual XMLHttpRequest Level 2 object\n    // (on browsers that support it), or it may fake one using other\n    // available technology.\n    //\n    // The created facade in any case presents the following interface:\n    //\n    //    open(method, url)\n    //    send(body)\n    //    abort()\n    //    setContentType()\n    //    responseText\n    //    responseXML\n    //    onload\n    //    onerror(err)  - includes timeout; abort is ignored\n    //\n    // See the documentation at http://www.w3.org/TR/XMLHttpRequest/\n    // for semantics.\n    //\n    // XMLHttpRequest Level 2 supports Cross-Origin Resource Sharing (CORS)\n    // which makes sandbox evasion possible.  Faked XHRL2s returned by\n    // this method may use CORS or some other technology to evade the\n    // sandbox.  The SAMP hub itself may selectively allow some of these\n    // technologies and not others, according to configuration.\n    XmlRpcClient.createXHR = function() {\n\n        // Creates an XHR facade based on a genuine XMLHttpRequest Level 2.\n        var XhrL2 = function(xhr) {\n            this.xhr = xhr;\n            xhr.onreadystatechange = (function(l2) {\n                return function() {\n                    if (xhr.readyState !== 4) {\n                        return;\n                    }\n                    else if (!l2.completed) {\n                        if (+xhr.status === 200) {\n                            l2.completed = true;\n                            l2.responseText = xhr.responseText;\n                            l2.responseXML = xhr.responseXML;\n                            if (l2.onload) {\n                                l2.onload();\n                            }\n                        }\n                    }\n                };\n            })(this);\n            xhr.onerror = (function(l2) {\n                return function(event) {\n                    if (!l2.completed) {\n                        l2.completed = true;\n                        if (l2.onerror) {\n                            if (event) {\n                                event.toString = function() {return \"No hub?\";};\n                            }\n                            else {\n                                event = \"No hub?\";\n                            }\n                            l2.onerror(event);\n                        }\n                    }\n                };\n            })(this);\n            xhr.ontimeout = (function(l2) {\n                return function(event) {\n                    if (!l2.completed) {\n                        l2.completed = true;\n                        if (l2.onerror) {\n                            l2.onerror(\"timeout\");\n                        }\n                    }\n                };\n            })(this);\n        };\n        XhrL2.prototype.open = function(method, url) {\n            this.xhr.open(method, url);\n        };\n        XhrL2.prototype.send = function(body) {\n            this.xhr.send(body);\n        };\n        XhrL2.prototype.abort = function() {\n            this.xhr.abort();\n        }\n        XhrL2.prototype.setContentType = function(mimeType) {\n            if (\"setRequestHeader\" in this.xhr) {\n                this.xhr.setRequestHeader(\"Content-Type\", mimeType);\n            }\n        }\n\n        // Creates an XHR facade based on an XDomainRequest (IE8+ only).\n        var XdrL2 = function(xdr) {\n            this.xdr = xdr;\n            xdr.onload = (function(l2) {\n                return function() {\n                    var e;\n                    l2.responseText = xdr.responseText;\n                    if (xdr.contentType === \"text/xml\" ||\n                        xdr.contentType === \"application/xml\" ||\n                        /\\/x-/.test(xdr.contentType)) {\n                        try {\n                            var xdoc = new ActiveXObject(\"Microsoft.XMLDOM\");\n                            xdoc.loadXML(xdr.responseText);\n                            l2.responseXML = xdoc;\n                        }\n                        catch (e) {\n                            l2.responseXML = e;\n                        }\n                    }\n                    if (l2.onload) {\n                        l2.onload();\n                    }\n                };\n            })(this);\n            xdr.onerror = (function(l2) {\n                return function(event) {\n                    if (l2.onerror) {\n                        l2.onerror(event);\n                    }\n                };\n            })(this);\n            xdr.ontimeout = (function(l2) {\n                return function(event) {\n                    if (l2.onerror) {\n                        l2.onerror(event);\n                    }\n                };\n            })(this);\n        };\n        XdrL2.prototype.open = function(method, url) {\n            this.xdr.open(method, url);\n        };\n        XdrL2.prototype.send = function(body) {\n            this.xdr.send(body);\n        };\n        XdrL2.prototype.abort = function() {\n            this.xdr.abort();\n        };\n        XdrL2.prototype.setContentType = function(mimeType) {\n            // can't do it.\n        };\n\n        // Creates an XHR Facade based on available XMLHttpRequest-type\n        // capabilibities.\n        // If an actual XMLHttpRequest Level 2 is available, use that.\n        if (typeof XMLHttpRequest !== \"undefined\") {\n            var xhr = new XMLHttpRequest();\n            if (\"withCredentials\" in xhr) {\n                return new XhrL2(xhr);\n            }\n        }\n\n        // Else if an XDomainRequest is available, use that.\n        if (typeof XDomainRequest !== \"undefined\") {\n            return new XdrL2(new XDomainRequest());\n        }\n\n        // Else fake an XMLHttpRequest using Flash/flXHR, if available\n        // and use that.\n        if (typeof flensed.flXHR !== \"undefined\") {\n            return new XhrL2(new flensed.flXHR({instancePooling: true}));\n        }\n\n        // No luck.\n        throw new Error(\"no cross-origin mechanism available\");\n    };\n\n    // Executes a request by passing it to the XML-RPC server.\n    // On success, the result is passed to the resultHandler.\n    // On failure, the errHandler is called with one of two possible\n    // arguments: an XmlRpc.Fault object, or an Error object.\n    XmlRpcClient.prototype.execute = function(req, resultHandler, errHandler) {\n        (function(xClient) {\n            var xhr;\n            var e;\n            try {\n                xhr = XmlRpcClient.createXHR();\n                xhr.open(\"POST\", xClient.endpoint);\n                xhr.setContentType(\"text/xml\");\n            }\n            catch (e) {\n                errHandler(e);\n                throw e;\n            }\n            xhr.onload = function() {\n                var xml = xhr.responseXML;\n                var result;\n                var e;\n                if (xml) {\n                    try {\n                        result = XmlRpc.decodeResponse(xml);\n                    }\n                    catch (e) {\n                        if (errHandler) {\n                            errHandler(e);\n                        }\n                        return;\n                    }\n                }\n                else {\n                    if (errHandler) {\n                        errHandler(\"no XML response\");\n                    }\n                    return;\n                }\n                if (result instanceof XmlRpc.Fault) {\n                    if (errHandler) {\n                        errHandler(result);\n                    }\n                }\n                else {\n                    if (resultHandler) {\n                        resultHandler(result);\n                    }\n                }\n            };\n            xhr.onerror = function(event) {\n                if (event) {\n                    event.toString = function() {return \"No hub?\";}\n                }\n                else {\n                    event = \"No hub\";\n                }\n                if (errHandler) {\n                    errHandler(event);\n                }\n            };\n            xhr.send(req.toXml());\n            return xhr;\n        })(this);\n    };\n\n    // Message class:\n    // Aggregates an MType string and a params map.\n    var Message = function(mtype, params) {\n        this[\"samp.mtype\"] = mtype;\n        this[\"samp.params\"] = params;\n    };\n\n    // Connection class:\n    // this is what clients use to communicate with the hub.\n    //\n    // All the methods from the Hub Abstract API as described in the\n    // SAMP standard are available as methods of a Connection object.\n    // The initial private-key argument required by the Web Profile is\n    // handled internally by this object - you do not need to supply it\n    // when calling one of the methods.\n    //\n    // All these calls have the same form:\n    //\n    //    connection.method([method-args], resultHandler, errorHandler)\n    //\n    // the first argument is an array of the arguments (as per the SAMP\n    // abstract hub API), the second argument is a function which is\n    // called on successful completion with the result of the SAMP call\n    // as its argument, and the third argument is a function which is\n    // called on unsuccessful completion with an error object as its\n    // argument.  The resultHandler and errorHandler arguments are optional.\n    //\n    // So for instance if you have a Connection object conn,\n    // you can send a notify message to all other clients by doing, e.g.:\n    //\n    //    conn.notifyAll([new samp.Message(mtype, params)])\n    //\n    // Connection has other methods as well as the hub API ones\n    // as documented below.\n    var Connection = function(regInfo) {\n        this.regInfo = regInfo;\n        this.privateKey = regInfo[\"samp.private-key\"];\n        if (! typeof(this.privateKey) === \"string\") {\n            throw new Error(\"Bad registration object\");\n        }\n        this.xClient = new XmlRpcClient();\n    };\n    (function() {\n        var connMethods = {\n            call: [TYPE_STRING, TYPE_STRING, TYPE_MAP],\n            callAll: [TYPE_STRING, TYPE_MAP],\n            callAndWait: [TYPE_STRING, TYPE_MAP, TYPE_STRING],\n            declareMetadata: [TYPE_MAP],\n            declareSubscriptions: [TYPE_MAP],\n            getMetadata: [TYPE_STRING],\n            getRegisteredClients: [],\n            getSubscribedClients: [TYPE_STRING],\n            getSubscriptions: [TYPE_STRING],\n            notify: [TYPE_STRING, TYPE_MAP],\n            notifyAll: [TYPE_MAP],\n            ping: [],\n            reply: [TYPE_STRING, TYPE_MAP]\n        };\n        var fn;\n        var types;\n        for (fn in connMethods) {\n            (function(fname, types) {\n                // errHandler may be passed an XmlRpc.Fault or a thrown Error.\n                Connection.prototype[fname] =\n                        function(sampArgs, resultHandler, errHandler) {\n                    var closer =\n                        (function(c) {return function() {c.close()}})(this);\n                    errHandler = errHandler || closer\n                    XmlRpc.checkParams(sampArgs, types);\n                    var request = new XmlRpcRequest(WEBSAMP_PREFIX + fname);\n                    request.addParam(this.privateKey);\n                    request.addParams(sampArgs);\n                    return this.xClient.\n                           execute(request, resultHandler, errHandler);\n                };\n            })(fn, connMethods[fn]);\n        }\n    })();\n    Connection.prototype.unregister = function() {\n        var e;\n        if (this.callbackRequest) {\n            try {\n                this.callbackRequest.abort();\n            }\n            catch (e) {\n            }\n        }\n        var request = new XmlRpcRequest(WEBSAMP_PREFIX + \"unregister\");\n        request.addParam(this.privateKey);\n        try {\n            this.xClient.execute(request);\n        }\n        catch (e) {\n            // log unregister failed\n        }\n        delete this.regInfo;\n        delete this.privateKey;\n    };\n\n    // Closes this connection.  It unregisters from the hub if still\n    // registered, but may harmlessly be called multiple times.\n    Connection.prototype.close = function() {\n        var e;\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        try {\n            if (this.regInfo) {\n                this.unregister();\n            }\n        }\n        catch (e) {\n        }\n        if (this.onclose) {\n            oc = this.onclose;\n            delete this.onclose;\n            try {\n                oc();\n            }\n            catch (e) {\n            }\n        }\n    };\n\n    // Arranges for this connection to receive callbacks.\n    //\n    // The callableClient argument must be an object implementing the\n    // SAMP callable client API, i.e. it must have the following methods:\n    //\n    //     receiveNotification(string sender-id, map message)\n    //     receiveCall(string sender-id, string msg-id, map message)\n    //     receiveResponse(string responder-id, string msg-tag, map response)\n    // \n    // The successHandler argument will be called with no arguments if the\n    // allowCallbacks hub method completes successfully - it is a suitable\n    // hook to use for declaring subscriptions.\n    //\n    // The CallableClient class provides a suitable implementation, see below.\n    Connection.prototype.setCallable = function(callableClient,\n                                                successHandler) {\n        var e;\n        if (this.callbackRequest) {\n            try {\n                this.callbackRequest.abort();\n            }\n            catch (e) {\n            }\n            finally {\n                delete this.callbackRequest;\n            }\n        }\n        if (!callableClient && !this.regInfo) {\n            return;\n        }\n        var request =\n            new XmlRpcRequest(WEBSAMP_PREFIX + \"allowReverseCallbacks\");\n        request.addParam(this.privateKey);\n        request.addParam(callableClient ? \"1\" : \"0\");\n        var closer = (function(c) {return function() {c.close()}})(this);\n        if (callableClient) {\n            (function(connection) {\n                var invokeCallback = function(callback) {\n                    var methodName = callback[\"samp.methodName\"];\n                    var methodParams = callback[\"samp.params\"];\n                    var handlerFunc = undefined;\n                    if (methodName === WEBSAMP_CLIENT_PREFIX\n                                     + \"receiveNotification\") {\n                        handlerFunc = callableClient.receiveNotification;\n                    }\n                    else if (methodName === WEBSAMP_CLIENT_PREFIX\n                                          + \"receiveCall\") {\n                        handlerFunc = callableClient.receiveCall;\n                    }\n                    else if (methodName === WEBSAMP_CLIENT_PREFIX\n                                          + \"receiveResponse\") {\n                        handlerFunc = callableClient.receiveResponse;\n                    }\n                    else {\n                        // unknown callback??\n                    }\n                    if (handlerFunc) {\n                        handlerFunc.apply(callableClient, methodParams);\n                    }\n                };\n                var startTime;\n                var resultHandler = function(result) {\n                    if (getSampType(result) != TYPE_LIST) {\n                        errHandler(new Error(\"pullCallbacks result not List\"));\n                        return;\n                    }\n                    var i;\n                    var e;\n                    for (i = 0; i < result.length; i++) {\n                        try {\n                            invokeCallback(result[i]);\n                        }\n                        catch (e) {\n                            // log here?\n                        }\n                    }\n                    callWaiter();\n                };\n                var errHandler = function(error) {\n                    var elapsed = new Date().getTime() - startTime;\n                    if (elapsed < 1000) {\n                        connection.close()\n                    }\n                    else {\n                        // probably a timeout\n                        callWaiter();\n                    }\n                };\n                var callWaiter = function() {\n                    if (!connection.regInfo) {\n                        return;\n                    }\n                    var request =\n                        new XmlRpcRequest(WEBSAMP_PREFIX + \"pullCallbacks\");\n                    request.addParam(connection.privateKey);\n                    request.addParam(\"600\");\n                    startTime = new Date().getTime();\n                    connection.callbackRequest =\n                        connection.xClient.\n                                   execute(request, resultHandler, errHandler);\n                };\n                var sHandler = function() {\n                    callWaiter();\n                    successHandler();\n                };\n                connection.xClient.execute(request, sHandler, closer);\n            })(this);\n        }\n        else {\n            this.xClient.execute(request, successHandler, closer);\n        }\n    };\n\n    // Takes a public URL and returns a URL that can be used from within\n    // this javascript context.  Some translation may be required, since\n    // a URL sent by an external application may be cross-domain, in which\n    // case browser sandboxing would typically disallow access to it.\n    Connection.prototype.translateUrl = function(url) {\n        var translator = this.regInfo[\"samp.url-translator\"] || \"\";\n        return translator + url;\n    };\n    Connection.Action = function(actName, actArgs, resultKey) {\n        this.actName = actName;\n        this.actArgs = actArgs;\n        this.resultKey = resultKey;\n    };\n\n    // Suitable implementation for a callable client object which can\n    // be supplied to Connection.setCallable().\n    // Its callHandler and replyHandler members are string->function maps\n    // which can be used to provide handler functions for MTypes and\n    // message tags respectively.\n    //\n    // In more detail:\n    // The callHandler member maps a string representing an MType to\n    // a function with arguments (senderId, message, isCall).\n    // The replyHandler member maps a string representing a message tag to\n    // a function with arguments (responderId, msgTag, response).\n    var CallableClient = function(connection) {\n        this.callHandler = {};\n        this.replyHandler = {};\n    };\n    CallableClient.prototype.init = function(connection) {\n    };\n    CallableClient.prototype.receiveNotification = function(senderId, message) {\n        var mtype = message[\"samp.mtype\"];\n        var handled = false;\n        var e;\n        if (mtype in this.callHandler) {\n            try {\n                this.callHandler[mtype](senderId, message, false);\n            }\n            catch (e) {\n            }\n            handled = true;\n        }\n        return handled;\n    };\n    CallableClient.prototype.receiveCall = function(senderId, msgId, message) {\n        var mtype = message[\"samp.mtype\"];\n        var handled = false;\n        var response;\n        var result;\n        var e;\n        if (mtype in this.callHandler) {\n            try {\n                result = this.callHandler[mtype](senderId, message, true) || {};\n                response = {\"samp.status\": \"samp.ok\",\n                            \"samp.result\": result};\n                handled = true;\n            }\n            catch (e) {\n                response = {\"samp.status\": \"samp.error\",\n                            \"samp.error\": {\"samp.errortxt\": e.toString()}};\n            }\n        }\n        else {\n            response = {\"samp.status\": \"samp.warning\",\n                        \"samp.result\": {},\n                        \"samp.error\": {\"samp.errortxt\": \"no action\"}};\n        }\n        this.connection.reply([msgId, response]);\n        return handled;\n    };\n    CallableClient.prototype.receiveResponse = function(responderId, msgTag,\n                                                        response) {\n        var handled = false;\n        var e;\n        if (msgTag in this.replyHandler) {\n            try {\n                this.replyHandler[msgTag](responderId, msgTag, response);\n                handled = true;\n            }\n            catch (e) {\n            }\n        }\n        return handled;\n    };\n    CallableClient.prototype.calculateSubscriptions = function() {\n        var subs = {};\n        var mt;\n        for (mt in this.callHandler) {\n            subs[mt] = {};\n        }\n        return subs;\n    };\n\n    // ClientTracker is a CallableClient which also provides tracking of\n    // registered clients.\n    //\n    // Its onchange member, if defined, will be called with arguments\n    // (client-id, change-type, associated-data) whenever the list or\n    // characteristics of registered clients has changed.\n    var ClientTracker = function() {\n        var tracker = this;\n        this.ids = {};\n        this.metas = {};\n        this.subs = {};\n        this.replyHandler = {};\n        this.callHandler = {\n            \"samp.hub.event.shutdown\": function(senderId, message) {\n                tracker.connection.close();\n            },\n            \"samp.hub.disconnect\": function(senderId, message) {\n                tracker.connection.close();\n            },\n            \"samp.hub.event.register\": function(senderId, message) {\n                var id = message[\"samp.params\"][\"id\"];\n                tracker.ids[id] = true;\n                tracker.changed(id, \"register\", null);\n            },\n            \"samp.hub.event.unregister\": function(senderId, message) {\n                var id = message[\"samp.params\"][\"id\"];\n                delete tracker.ids[id];\n                delete tracker.metas[id];\n                delete tracker.subs[id];\n                tracker.changed(id, \"unregister\", null);\n            },\n            \"samp.hub.event.metadata\": function(senderId, message) {\n                var id = message[\"samp.params\"][\"id\"];\n                var meta = message[\"samp.params\"][\"metadata\"];\n                tracker.metas[id] = meta;\n                tracker.changed(id, \"meta\", meta);\n            },\n            \"samp.hub.event.subscriptions\": function(senderId, message) {\n                var id = message[\"samp.params\"][\"id\"];\n                var subs = message[\"samp.params\"][\"subscriptions\"];\n                tracker.subs[id] = subs;\n                tracker.changed(id, \"subs\", subs);\n            }\n        };\n    };\n    ClientTracker.prototype = heir(CallableClient.prototype);\n    ClientTracker.prototype.changed = function(id, type, data) {\n        if (this.onchange) {\n            this.onchange(id, type, data);\n        }\n    };\n    ClientTracker.prototype.init = function(connection) {\n        var tracker = this;\n        this.connection = connection;\n        var retrieveInfo = function(id, type, infoFuncName, infoArray) {\n            connection[infoFuncName]([id], function(info) {\n                infoArray[id] = info;\n                tracker.changed(id, type, info);\n            });\n        };\n        connection.getRegisteredClients([], function(idlist) {\n            var i;\n            var id;\n            tracker.ids = {};\n            for (i = 0; i < idlist.length; i++) {\n                id = idlist[i];\n                tracker.ids[id] = true;\n                retrieveInfo(id, \"meta\", \"getMetadata\", tracker.metas);\n                retrieveInfo(id, \"subs\", \"getSubscriptions\", tracker.subs);\n            }\n            tracker.changed(null, \"ids\", null);\n        });\n    };\n    ClientTracker.prototype.getName = function(id) {\n        var meta = this.metas[id];\n        return (meta && meta[\"samp.name\"]) ? meta[\"samp.name\"] : \"[\" + id + \"]\";\n    };\n\n    // Connector class:\n    // A higher level class which can manage transparent hub\n    // registration/unregistration and client tracking.\n    //\n    // On construction, the name argument is mandatory, and corresponds\n    // to the samp.name item submitted at registration time.\n    // The other arguments are optional.\n    // meta is a metadata map (if absent, no metadata is declared)\n    // callableClient is a callable client object for receiving callbacks\n    // (if absent, the client is not callable).\n    // subs is a subscriptions map (if absent, no subscriptions are declared)\n    var Connector = function(name, meta, callableClient, subs) {\n        this.name = name;\n        this.meta = meta;\n        this.callableClient = callableClient;\n        this.subs = subs;\n        this.regTextNodes = [];\n        this.whenRegs = [];\n        this.whenUnregs = [];\n        this.connection = undefined;\n        this.onreg = undefined;\n        this.onunreg = undefined;\n    };\n    var setRegText = function(connector, txt) {\n        var i;\n        var nodes = connector.regTextNodes;\n        var node;\n        for (i = 0; i < nodes.length; i++) {\n            node = nodes[i];\n            node.innerHTML = \"\";\n            node.appendChild(document.createTextNode(txt));\n        }\n    };\n    Connector.prototype.setConnection = function(conn) {\n        var connector = this;\n        var e;\n        if (this.connection) {\n            this.connection.close();\n            if (this.onunreg) {\n                try {\n                    this.onunreg();\n                }\n                catch (e) {\n                }\n            }\n        }\n        this.connection = conn;\n        if (conn) {\n            conn.onclose = function() {\n                connector.connection = null;\n                if (connector.onunreg) {\n                    try {\n                        connector.onunreg();\n                    }\n                    catch (e) {\n                    }\n                }\n                connector.update();\n            };\n            if (this.meta) {\n                conn.declareMetadata([this.meta]);\n            }\n            if (this.callableClient) {\n                if (this.callableClient.init) {\n                    this.callableClient.init(conn);\n                }\n                conn.setCallable(this.callableClient, function() {\n                    conn.declareSubscriptions([connector.subs]);\n                });\n            }\n            if (this.onreg) {\n                try {\n                    this.onreg(conn);\n                }\n                catch (e) {\n                }\n            }\n        }\n        this.update();\n    };\n    Connector.prototype.register = function() {\n        var connector = this;\n        var regErrHandler = function(err) {\n            setRegText(connector, \"no (\" + err.toString() + \")\");\n        };\n        var regSuccessHandler = function(conn) {\n            connector.setConnection(conn);\n            setRegText(connector, conn ? \"Yes\" : \"No\");\n        };\n        register(this.name, regSuccessHandler, regErrHandler);\n    };\n    Connector.prototype.unregister = function() {\n        if (this.connection) {\n            this.connection.unregister([]);\n            this.setConnection(null);\n        }\n    };\n\n    // Returns a document fragment which contains Register/Unregister\n    // buttons for use by the user to attempt to connect/disconnect\n    // with the hub.  This is useful for models where explicit\n    // user registration is encouraged or required, but when using\n    // the register-on-demand model such buttons are not necessary.\n    Connector.prototype.createRegButtons = function() {\n        var connector = this;\n        var regButt = document.createElement(\"button\");\n        regButt.setAttribute(\"type\", \"button\");\n        regButt.appendChild(document.createTextNode(\"Register\"));\n        regButt.onclick = function() {connector.register();};\n        this.whenUnregs.push(regButt);\n        var unregButt = document.createElement(\"button\");\n        unregButt.setAttribute(\"type\", \"button\");\n        unregButt.appendChild(document.createTextNode(\"Unregister\"));\n        unregButt.onclick = function() {connector.unregister();};\n        this.whenRegs.push(unregButt);\n        var regText = document.createElement(\"span\");\n        this.regTextNodes.push(regText);\n        var node = document.createDocumentFragment();\n        node.appendChild(regButt);\n        node.appendChild(document.createTextNode(\" \"));\n        node.appendChild(unregButt);\n        var label = document.createElement(\"span\");\n        label.innerHTML = \" <strong>Registered: </strong>\";\n        node.appendChild(label);\n        node.appendChild(regText);\n        this.update();\n        return node;\n    };\n\n    Connector.prototype.update = function() {\n        var i;\n        var isConnected = !! this.connection;\n        var enableds = isConnected ? this.whenRegs : this.whenUnregs;\n        var disableds = isConnected ? this.whenUnregs : this.whenRegs;\n        for (i = 0; i < enableds.length; i++) {\n            enableds[i].removeAttribute(\"disabled\");\n        }\n        for (i = 0; i < disableds.length; i++) {\n            disableds[i].setAttribute(\"disabled\", \"disabled\");\n        }\n        setRegText(this, \"No\");\n    };\n\n    // Provides execution of a SAMP operation with register-on-demand.\n    // You can use this method to provide lightweight registration/use\n    // of web SAMP.  Simply provide a connHandler function which\n    // does something with a connection (e.g. sends a message) and\n    // Connector.runWithConnection on it.  This will connect if not\n    // already connected, and call the connHandler on with the connection.\n    // No explicit registration action is then required from the user.\n    //\n    // If the regErrorHandler argument is supplied, it is a function of\n    // one (error) argument called in the case that registration-on-demand\n    // fails.\n    //\n    // This is a more-or-less complete sampjs page:\n    //   <script>\n    //     var connector = new samp.Connector(\"pinger\", {\"samp.name\": \"Pinger\"})\n    //     var pingFunc = function(connection) {\n    //       connection.notifyAll([new samp.Message(\"samp.app.ping\", {})])\n    //     }\n    //   </script>\n    //   <button onclick=\"connector.runWithConnection(pingFunc)\">Ping</button>\n    Connector.prototype.runWithConnection =\n            function(connHandler, regErrorHandler) {\n        var connector = this;\n        var regSuccessHandler = function(conn) {\n            connector.setConnection(conn);\n            connHandler(conn);\n        };\n        var regFailureHandler = function(e) {\n            connector.setConnection(undefined);\n            regErrorHandler(e);\n        };\n        var pingResultHandler = function(result) {\n            connHandler(connector.connection);\n        };\n        var pingErrorHandler = function(err) {\n            register(this.name, regSuccessHandler, regFailureHandler);\n        };\n        if (this.connection) {\n            // Use getRegisteredClients as the most lightweight check\n            // I can think of that this connection is still OK.\n            // Ping doesn't work because the server replies even if the\n            // private-key is incorrect/invalid.  Is that a bug or not?\n            this.connection.\n                 getRegisteredClients([], pingResultHandler, pingErrorHandler);\n        }\n        else {\n            register(this.name, regSuccessHandler, regFailureHandler);\n        }\n    };\n\n    // Sets up an interval timer to run at intervals and notify a callback\n    // about whether a hub is currently running.\n    // Every millis milliseconds, the supplied availHandler function is\n    // called with a boolean argument: true if a (web profile) hub is\n    // running, false if not.\n    // Returns the interval timer (can be passed to clearInterval()).\n    Connector.prototype.onHubAvailability = function(availHandler, millis) {\n        samp.ping(availHandler);\n\n        // Could use the W3C Page Visibility API to avoid making these\n        // checks when the page is not visible.\n        return setInterval(function() {samp.ping(availHandler);}, millis);\n    };\n\n    // Determines whether a given subscriptions map indicates subscription\n    // to a given mtype.\n    var isSubscribed = function(subs, mtype) {\n        var matching = function(pattern, mtype) {\n            if (pattern == mtype) {\n                return true;\n            }\n            else if (pattern === \"*\") {\n                return true;\n            }\n            else {\n                var prefix;\n                var split = /^(.*)\\.\\*$/.exec(pat);\n                if (split) {\n                    prefix = split[1];\n                    if (prefix === mtype.substring(0, prefix.length)) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        };\n        var pat;\n        for (pat in subs) {\n            if (matching(pat, mtype)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // Attempts registration with a SAMP hub.\n    // On success the supplied connectionHandler function is called\n    // with the connection as an argument, on failure the supplied\n    // errorHandler is called with an argument that may be an Error\n    // or an XmlRpc.Fault.\n    var register = function(appName, connectionHandler, errorHandler) {\n        var xClient = new XmlRpcClient();\n        var regRequest = new XmlRpcRequest(WEBSAMP_PREFIX + \"register\");\n        var securityInfo = {\"samp.name\": appName};\n        regRequest.addParam(securityInfo);\n        regRequest.checkParams([TYPE_MAP]);\n        var resultHandler = function(result) {\n            var conn;\n            var e;\n            try {\n                conn = new Connection(result);\n            }\n            catch (e) {\n                errorHandler(e);\n                return;\n            }\n            connectionHandler(conn);\n        };\n        xClient.execute(regRequest, resultHandler, errorHandler);\n    };\n\n    // Calls the hub ping method once.  It is not necessary to be\n    // registered to do this.\n    // The supplied pingHandler function is called with a boolean argument:\n    // true if a (web profile) hub is running, false if not.\n    var ping = function(pingHandler) {\n        var xClient = new XmlRpcClient();\n        var pingRequest = new XmlRpcRequest(WEBSAMP_PREFIX + \"ping\");\n        var resultHandler = function(result) {\n            pingHandler(true);\n        };\n        var errorHandler = function(error) {\n            pingHandler(false);\n        };\n        xClient.execute(pingRequest, resultHandler, errorHandler);\n    };\n\n\n    /* Exports. */\n    var jss = {};\n    jss.XmlRpcRequest = XmlRpcRequest;\n    jss.XmlRpcClient = XmlRpcClient;\n    jss.Message = Message;\n    jss.TYPE_STRING = TYPE_STRING;\n    jss.TYPE_LIST = TYPE_LIST;\n    jss.TYPE_MAP = TYPE_MAP;\n    jss.register = register;\n    jss.ping = ping;\n    jss.isSubscribed = isSubscribed;\n    jss.Connector = Connector;\n    jss.Connection = Connection;\n    jss.CallableClient = CallableClient;\n    jss.ClientTracker = ClientTracker;\n\n    module.exports.samp = jss;\n\n    return jss;\n})();\n"],"names":["_react","_interopRequireDefault","require","_lodash","_mobx","_mobxReact","_semanticUiReact","_samp","configure","enforceActions","DownloadProducts","observer","props","_React$useState","React","useState","_React$useState2","_slicedToArray2","sampActive","setSampActive","connector","useRef","samp","Connector","useEffect","my_interval","interval","current","onHubAvailability","hubRunning","clearInterval","loadSampImage","e","filename","l","window","location","url","protocol","hostname","port","cname","name","ca","decodeURIComponent","document","cookie","split","i","length","c","charAt","substring","indexOf","getCookie","runWithConnection","connection","msg","Message","notifyAll","alert","products","XNICER map","text","color","XNICER inverse variance","XNICEST map","XNICEST inverse variance","Star density","js9options","scale","createElement","_","map","key","Button","Group","animated","href","Content","hidden","content","visible","basic","icon","onClick","JS9","Load","className","disabled","getSampType","obj","Array","Object","Error","getChildElements","el","childTagName","child","children","childNodes","childEls","nodeType","tagName","push","getSoleChild","getTextContent","txt","nodeValue","XmlRpc","s","replace","paramList","typeList","npar","actualTypeList","ok","v2x","prefix","result","type","escapeXml","join","x2v","valueEl","allowInt","j","childEl","elName","valueEls","list","s_name","s_value","jc","memberEls","undefined","paramsEl","paramEls","results","xmlToValue","faultEl","faultObj","Fault","faultString","faultCode","xml","mrEl","documentElement","contentEl","decodeFault","decodeParams","this","prototype","toString","XmlRpcRequest","methodName","params","JSON","stringify","addParam","param","addParams","checkParams","toXml","lines","valueToXml","XmlRpcClient","endpoint","createXHR","XhrL2","xhr","l2","onreadystatechange","readyState","completed","status","responseText","responseXML","onload","onerror","event","ontimeout","open","method","send","body","abort","setContentType","mimeType","setRequestHeader","XdrL2","xdr","contentType","test","xdoc","ActiveXObject","loadXML","XMLHttpRequest","XDomainRequest","flensed","flXHR","instancePooling","execute","req","resultHandler","errHandler","xClient","decodeResponse","Connection","regInfo","privateKey","_typeof2","fn","connMethods","call","callAll","callAndWait","declareMetadata","declareSubscriptions","getMetadata","getRegisteredClients","getSubscribedClients","getSubscriptions","notify","ping","reply","fname","types","sampArgs","closer","close","request","unregister","callbackRequest","WEBSAMP_PREFIX","closed","onclose","oc","setCallable","callableClient","successHandler","startTime","callWaiter","callback","methodParams","handlerFunc","receiveNotification","receiveCall","receiveResponse","apply","error","Date","getTime","translateUrl","Action","actName","actArgs","resultKey","CallableClient","callHandler","replyHandler","init","senderId","message","mtype","handled","msgId","response","samp.status","samp.result","samp.error","samp.errortxt","responderId","msgTag","calculateSubscriptions","mt","subs","ClientTracker","tracker","ids","metas","samp.hub.event.shutdown","samp.hub.disconnect","samp.hub.event.register","id","changed","samp.hub.event.unregister","samp.hub.event.metadata","meta","samp.hub.event.subscriptions","proto","F","heir","data","onchange","retrieveInfo","infoFuncName","infoArray","info","idlist","getName","regTextNodes","whenRegs","whenUnregs","onreg","onunreg","setRegText","node","nodes","innerHTML","appendChild","createTextNode","setConnection","conn","update","register","err","createRegButtons","regButt","setAttribute","onclick","unregButt","regText","createDocumentFragment","label","isConnected","enableds","disableds","removeAttribute","connHandler","regErrorHandler","regSuccessHandler","regFailureHandler","availHandler","millis","setInterval","appName","connectionHandler","errorHandler","regRequest","securityInfo","samp.name","jss","TYPE_STRING","TYPE_LIST","TYPE_MAP","pingHandler","pingRequest","isSubscribed","pat","matching","pattern","exec","module","exports"],"version":3,"file":"DownloadProducts.e1acb367.js.map"}